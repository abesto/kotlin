package

internal trait In</*0*/ in T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal trait Inv</*0*/ T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal trait Out</*0*/ out T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class Test</*0*/ in I, /*1*/ out O, /*2*/ P> {
    public constructor Test</*0*/ in I, /*1*/ out O, /*2*/ P>(/*0*/ ok1: O, /*1*/ ok2: In<I>, /*2*/ ok3: In<In<O>>, /*3*/ ok4: Inv<P>, /*4*/ ok5: P, /*5*/ ok6: Out<O>, /*6*/ ok7: P, /*7*/ ok8: Out<In<P>>, /*8*/ neOk1: I, /*9*/ neOk2: In<O>, /*10*/ neOk3: In<In<I>>, /*11*/ neOk4: Inv<I>, /*12*/ neOk5: Inv<O>, /*13*/ neOk6: O, /*14*/ neOk7: In<I>, /*15*/ neOk8: In<In<O>>, /*16*/ neOk9: Out<O>)
    internal final val neOk1: I
    internal final val neOk2: In<O>
    internal final val neOk3: In<In<I>>
    internal final val neOk4: Inv<I>
    internal final val neOk5: Inv<O>
    internal final var neOk6: O
    internal final var neOk7: In<I>
    internal final var neOk8: In<In<O>>
    internal final var neOk9: Out<O>
    internal final val ok1: O
    internal final val ok2: In<I>
    internal final val ok3: In<In<O>>
    internal final val ok4: Inv<P>
    internal final val ok5: P
    internal final val ok6: Out<O>
    internal final var ok7: P
    internal final var ok8: Out<In<P>>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}